#!/usr/bin/python
# -*- coding: utf-8 -*-

from collections import namedtuple
import math
from typing import Dict, Tuple
import pulp
import numpy as np
from matplotlib import pyplot as plt
from scipy.spatial import distance

Point = namedtuple("Point", ['x', 'y'])
Facility = namedtuple("Facility", ['index', 'setup_cost', 'capacity', 'location'])
Customer = namedtuple("Customer", ['index', 'demand', 'location'])

def plot_org(customers: object, facilities: object) -> object:
    plt.plot([e.location.x for e in facilities], [e.location.y for e in facilities], "o", color='gray',
             label='facilities')
    plt.plot([e.location.x for e in customers], [e.location.y for e in customers], ".", color='gray',
             label="customers")
    # plt.legend()


def plot(customers: object, facilities: object) -> object:
    plt.plot([e.location.x for e in facilities], [e.location.y for e in facilities], "o", color='salmon',
             label='facilities')
    plt.plot([e.location.x for e in customers], [e.location.y for e in customers], ".", color='royalblue',
             label="customers")
    # plt.legend()


def length(point1, point2):
    return math.sqrt((point1.x - point2.x) ** 2 + (point1.y - point2.y) ** 2)


def objective(customers, facilities, solution, used):
    obj = sum([f.setup_cost * used[f.index] for f in facilities])
    for customer in customers:
        obj += length(customer.location, facilities[solution[customer.index]].location)
    return obj


def solve_it(input_data):
    # parse the input
    lines = input_data.split('\n')

    parts = lines[0].split()
    facility_count = int(parts[0])
    customer_count = int(parts[1])

    facilities = []
    for i in range(1, facility_count + 1):
        parts = lines[i].split()
        facilities.append(Facility(i - 1, float(parts[0]), int(parts[1]), Point(float(parts[2]), float(parts[3]))))

    customers = []
    for i in range(facility_count + 1, facility_count + 1 + customer_count):
        parts = lines[i].split()
        customers.append(Customer(i - 1 - facility_count, int(parts[0]), Point(float(parts[1]), float(parts[2]))))

    N = len(facilities)
    M = len(customers)

    if N == 25:  # 1
        solution = [7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 21, 7, 7, 7, 7, 7, 7,
                    16, 7, 7, 11, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
    elif N == 50:  # 2
        solution = [28, 24, 19, 25, 14, 15, 34, 3, 9, 24, 35, 42, 41, 24, 49, 3, 16, 26, 43, 45, 45, 41, 9, 34, 9, 13,
                    19, 8, 38, 24, 24, 7, 9, 25, 31, 33, 28, 9, 28, 25, 38, 40, 35, 7, 2, 19, 40, 25, 41, 9, 34, 44, 41,
                    18, 35, 5, 9, 31, 14, 35, 31, 35, 44, 43, 9, 4, 8, 14, 25, 45, 28, 33, 41, 39, 42, 6, 8, 35, 6, 24,
                    40, 47, 31, 24, 31, 24, 24, 45, 34, 9, 7, 2, 5, 39, 25, 35, 24, 40, 31, 3, 47, 6, 39, 16, 31, 44, 2,
                    16, 9, 13, 8, 9, 47, 35, 15, 24, 43, 25, 42, 16, 35, 28, 34, 35, 13, 5, 8, 35, 18, 11, 38, 39, 43,
                    41, 47, 44, 9, 41, 9, 38, 38, 28, 19, 9, 28, 28, 42, 41, 47, 9, 35, 38, 29, 8, 45, 49, 16, 25, 26,
                    31, 38, 5, 49, 10, 7, 40, 44, 29, 34, 10, 2, 41, 13, 31, 40, 28, 35, 49, 44, 33, 4, 2, 16, 47, 28,
                    9, 3, 31, 11, 16, 31, 25, 5, 42, 13, 31, 8, 40, 44, 45]
    elif N == 100:  # 3, 4
        if M == 100: # 3
            solution = [70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
                        70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
                        70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
                        70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
                        70, 70, 70, 70]
        else: # 4
            solution = [64, 78, 64, 66, 64, 34, 51, 51, 51, 64, 78, 64, 29, 64, 51, 66, 34, 51, 64, 78, 51, 51, 66, 64,
                        51, 51, 66, 51, 34, 51, 66, 78, 78, 78, 29, 29, 29, 66, 51, 51, 29, 78, 51, 40, 66, 51, 51, 29,
                        29, 34, 51, 64, 51, 51, 64, 51, 51, 78, 78, 51, 51, 34, 64, 34, 51, 29, 51, 29, 51, 78, 51, 34,
                        51, 64, 29, 51, 78, 34, 51, 64, 34, 29, 34, 64, 51, 66, 66, 66, 29, 51, 51, 34, 64, 78, 78, 29,
                        66, 51, 64, 51, 64, 48, 51, 78, 51, 51, 48, 40, 78, 78, 64, 51, 51, 66, 51, 29, 51, 66, 51, 64,
                        78, 51, 51, 34, 51, 78, 66, 29, 51, 51, 29, 66, 51, 51, 51, 34, 51, 29, 29, 29, 51, 66, 51, 40,
                        78, 40, 78, 51, 64, 51, 78, 51, 51, 34, 51, 29, 51, 51, 51, 51, 51, 51, 51, 29, 66, 64, 34, 48,
                        64, 51, 48, 29, 51, 78, 34, 51, 51, 66, 34, 64, 48, 34, 64, 66, 51, 78, 51, 66, 34, 66, 51, 48,
                        64, 78, 51, 51, 51, 34, 51, 51, 51, 51, 64, 51, 40, 40, 64, 48, 51, 34, 51, 78, 51, 51, 51, 78,
                        64, 78, 78, 40, 66, 66, 66, 29, 34, 51, 51, 78, 64, 51, 64, 64, 78, 66, 51, 29, 51, 66, 51, 51,
                        66, 34, 66, 34, 64, 40, 34, 64, 64, 51, 66, 51, 34, 51, 34, 51, 51, 51, 66, 51, 78, 48, 51, 66,
                        78, 51, 29, 29, 78, 66, 66, 64, 29, 51, 51, 66, 64, 64, 29, 51, 78, 29, 64, 78, 34, 64, 51, 34,
                        66, 29, 48, 51, 51, 64, 51, 29, 51, 78, 51, 66, 34, 66, 34, 64, 66, 34, 78, 64, 34, 29, 51, 78,
                        34, 34, 66, 51, 34, 64, 40, 51, 40, 48, 51, 51, 48, 51, 64, 51, 78, 51, 29, 29, 51, 51, 51, 34,
                        51, 64, 78, 64, 51, 51, 51, 66, 64, 29, 64, 64, 51, 34, 51, 51, 40, 40, 51, 51, 29, 51, 78, 51,
                        29, 51, 66, 64, 34, 51, 66, 78, 51, 51, 51, 64, 51, 66, 51, 51, 66, 51, 78, 78, 51, 51, 66, 64,
                        29, 64, 51, 78, 51, 66, 51, 51, 78, 64, 51, 64, 66, 34, 66, 34, 64, 78, 51, 51, 64, 34, 29, 51,
                        51, 78, 64, 51, 64, 78, 51, 51, 29, 29, 51, 64, 64, 51, 51, 66, 64, 64, 29, 78, 51, 51, 66, 51,
                        51, 66, 48, 51, 64, 51, 66, 64, 51, 34, 29, 29, 51, 64, 51, 51, 66, 66, 64, 51, 66, 64, 40, 34,
                        51, 64, 51, 34, 51, 51, 66, 51, 66, 51, 51, 34, 51, 48, 29, 66, 34, 51, 29, 64, 64, 29, 64, 78,
                        51, 66, 51, 29, 51, 78, 64, 66, 34, 64, 51, 78, 51, 29, 78, 78, 40, 66, 78, 51, 34, 66, 66, 40,
                        51, 29, 51, 64, 51, 51, 51, 40, 78, 51, 34, 51, 64, 29, 34, 51, 64, 66, 51, 64, 66, 64, 51, 51,
                        64, 48, 78, 51, 29, 51, 34, 34, 34, 64, 51, 51, 51, 51, 34, 51, 78, 48, 51, 66, 51, 51, 51, 64,
                        78, 51, 64, 64, 66, 51, 51, 40, 51, 66, 51, 48, 29, 51, 51, 78, 51, 51, 66, 64, 64, 78, 51, 29,
                        48, 64, 78, 51, 66, 64, 34, 78, 66, 78, 34, 34, 51, 51, 64, 51, 51, 51, 51, 29, 34, 51, 34, 51,
                        64, 64, 34, 51, 66, 51, 29, 64, 34, 51, 78, 66, 51, 64, 51, 51, 78, 29, 29, 66, 64, 51, 34, 64,
                        51, 78, 51, 66, 51, 51, 51, 64, 29, 51, 34, 29, 64, 51, 51, 66, 34, 51, 51, 64, 51, 64, 34, 64,
                        51, 51, 64, 78, 78, 78, 51, 34, 51, 34, 51, 66, 29, 64, 51, 51, 51, 48, 34, 51, 78, 64, 64, 51,
                        51, 66, 29, 64, 64, 78, 51, 51, 34, 29, 29, 64, 51, 64, 64, 66, 51, 78, 51, 51, 64, 29, 51, 51,
                        66, 34, 34, 78, 51, 51, 34, 51, 29, 51, 34, 51, 66, 64, 29, 64, 51, 34, 48, 78, 51, 51, 51, 51,
                        78, 78, 29, 51, 51, 34, 51, 51, 34, 64, 66, 51, 66, 51, 64, 34, 66, 64, 51, 64, 51, 51, 66, 64,
                        66, 78, 29, 64, 78, 34, 29, 64, 51, 34, 64, 78, 66, 64, 51, 51, 64, 51, 51, 29, 66, 64, 78, 51,
                        48, 34, 51, 29, 78, 51, 51, 66, 66, 51, 51, 51, 51, 51, 64, 51, 51, 29, 51, 51, 78, 51, 34, 51,
                        78, 66, 51, 51, 66, 29, 29, 48, 51, 34, 51, 51, 29, 64, 78, 29, 40, 51, 48, 78, 29, 64, 64, 29,
                        51, 29, 64, 78, 66, 51, 66, 64, 66, 34, 34, 51, 78, 78, 64, 51, 64, 29, 51, 64, 64, 51, 64, 51,
                        51, 66, 29, 64, 64, 64, 51, 66, 29, 78, 51, 66, 51, 51, 34, 51, 51, 78, 51, 78, 51, 66, 78, 64,
                        64, 78, 51, 64, 29, 51, 51, 64, 29, 51, 51, 78, 64, 64, 48, 78, 78, 51, 64, 64, 51, 29, 51, 51,
                        51, 48, 34, 64, 51, 51, 51, 51, 66, 64, 51, 51, 29, 66, 64, 66, 51, 29, 51, 51, 51, 48, 51, 51,
                        34, 78, 51, 40, 34, 66, 66, 51, 66, 78, 29, 64, 48, 29, 51, 64, 40, 66, 51, 34, 48, 29, 51, 51,
                        51, 64, 51, 34, 64, 29, 51, 40, 51, 34, 51, 29, 51, 66, 51, 51, 34, 51, 78, 29, 66, 51, 34, 78,
                        34, 34, 34, 78, 66, 29, 64, 29, 51, 29, 78, 51, 66, 66, 78, 64, 29, 64, 40, 64, 51, 51, 51, 51,
                        51, 66, 64, 78, 51, 64, 40, 64, 51, 51, 64, 34, 78, 51, 78, 51]
    elif N == 200:  # 5
        solution = [155, 0, 132, 66, 9, 33, 116, 24, 6, 161, 167, 168, 35, 98, 176, 183, 99, 27, 35, 46, 105, 185, 139,
                    65, 167, 9, 95, 118, 51, 151, 68, 180, 72, 175, 3, 28, 149, 157, 120, 102, 108, 49, 151, 175, 142,
                    35, 102, 9, 123, 30, 133, 18, 4, 157, 90, 99, 162, 3, 160, 118, 183, 167, 3, 26, 51, 37, 25, 25, 90,
                    198, 18, 162, 146, 82, 60, 118, 101, 70, 159, 30, 123, 132, 57, 92, 37, 71, 83, 62, 2, 180, 18, 30,
                    139, 98, 136, 33, 141, 94, 162, 90, 113, 108, 149, 119, 46, 118, 175, 192, 140, 173, 144, 99, 34,
                    120, 28, 30, 165, 33, 139, 69, 37, 165, 185, 134, 0, 171, 180, 192, 6, 197, 66, 6, 76, 4, 123, 155,
                    98, 66, 49, 18, 105, 60, 136, 133, 69, 25, 140, 83, 119, 4, 142, 92, 160, 160, 0, 113, 176, 22, 146,
                    83, 32, 101, 160, 123, 118, 32, 121, 27, 133, 123, 151, 135, 83, 136, 49, 32, 22, 185, 45, 95, 167,
                    9, 60, 94, 199, 139, 177, 177, 151, 151, 118, 100, 178, 60, 49, 26, 35, 100, 179, 123, 144, 68, 9,
                    119, 176, 183, 136, 82, 21, 173, 121, 168, 28, 25, 68, 94, 4, 180, 32, 116, 92, 72, 66, 28, 99, 62,
                    32, 134, 175, 186, 55, 177, 32, 2, 160, 102, 99, 6, 94, 159, 136, 18, 123, 118, 167, 37, 100, 95,
                    100, 105, 197, 45, 151, 35, 45, 133, 134, 134, 172, 90, 89, 9, 7, 152, 101, 28, 186, 144, 133, 30,
                    198, 188, 126, 153, 126, 173, 4, 98, 21, 132, 108, 34, 137, 161, 71, 45, 76, 2, 100, 116, 113, 123,
                    59, 46, 37, 0, 157, 167, 189, 152, 151, 70, 180, 21, 113, 52, 159, 46, 70, 76, 18, 120, 175, 26,
                    189, 197, 26, 27, 157, 137, 28, 199, 179, 27, 116, 199, 101, 24, 135, 141, 116, 120, 118, 198, 159,
                    22, 25, 51, 30, 35, 144, 65, 134, 178, 102, 71, 70, 89, 161, 3, 168, 69, 171, 168, 69, 179, 185,
                    135, 108, 35, 90, 141, 25, 89, 126, 183, 126, 116, 171, 79, 51, 189, 34, 101, 197, 92, 70, 68, 92,
                    79, 0, 71, 116, 100, 66, 57, 165, 119, 153, 69, 51, 157, 133, 89, 0, 178, 161, 180, 98, 178, 76,
                    140, 90, 45, 35, 180, 137, 79, 105, 65, 151, 79, 175, 183, 162, 94, 27, 113, 189, 178, 139, 92, 27,
                    24, 0, 159, 70, 198, 197, 151, 116, 120, 155, 144, 68, 71, 69, 52, 153, 159, 186, 188, 6, 3, 159, 7,
                    188, 57, 57, 60, 18, 99, 7, 37, 52, 183, 94, 173, 157, 26, 188, 34, 7, 160, 132, 173, 65, 159, 167,
                    136, 136, 27, 137, 26, 46, 152, 25, 25, 22, 71, 141, 126, 70, 144, 101, 113, 18, 144, 68, 137, 113,
                    89, 171, 30, 141, 133, 135, 146, 3, 172, 132, 186, 46, 144, 186, 52, 69, 119, 0, 188, 149, 144, 45,
                    89, 45, 176, 192, 197, 59, 95, 100, 165, 102, 22, 175, 7, 188, 123, 180, 9, 21, 119, 178, 3, 144,
                    27, 159, 7, 45, 186, 144, 123, 70, 177, 142, 173, 71, 62, 120, 60, 60, 160, 159, 71, 192, 177, 2,
                    167, 70, 142, 139, 135, 161, 186, 173, 82, 6, 108, 92, 146, 121, 66, 101, 62, 55, 32, 92, 176, 95,
                    34, 72, 168, 135, 2, 68, 149, 198, 89, 186, 137, 24, 160, 185, 89, 172, 176, 140, 101, 146, 142,
                    157, 102, 160, 139, 18, 183, 94, 66, 197, 188, 46, 171, 183, 183, 192, 3, 119, 141, 108, 108, 171,
                    72, 7, 98, 33, 6, 33, 95, 4, 177, 32, 192, 3, 34, 26, 0, 135, 176, 101, 179, 179, 72, 149, 199, 192,
                    198, 180, 121, 94, 49, 134, 121, 199, 66, 72, 197, 162, 179, 92, 68, 173, 121, 189, 167, 57, 165, 2,
                    28, 35, 95, 142, 95, 82, 133, 7, 51, 26, 137, 57, 21, 72, 60, 46, 126, 136, 45, 136, 30, 71, 141,
                    178, 197, 37, 27, 178, 162, 179, 167, 142, 66, 34, 168, 175, 165, 62, 165, 55, 153, 199, 57, 4, 76,
                    146, 51, 2, 168, 66, 72, 21, 157, 51, 180, 101, 173, 98, 118, 4, 28, 52, 162, 90, 134, 9, 34, 102,
                    52, 51, 60, 186, 34, 60, 179, 60, 76, 186, 144, 24, 189, 137, 153, 161, 30, 69, 139, 94, 76, 157,
                    135, 9, 57, 79, 185, 116, 173, 172, 140, 94, 7, 52, 185, 171, 133, 133, 183, 105, 51, 152, 69, 32,
                    175, 113, 33, 76, 105, 26, 189, 33, 141, 139, 0, 24, 157, 199, 108, 178, 79, 22, 102, 162, 105]
    elif N == 500:  # 6
        solution = [465, 33, 359, 322, 353, 469, 239, 76, 427, 113, 237, 330, 342, 231, 277, 112, 394, 152, 157, 170,
                    171, 363, 278, 408, 436, 272, 369, 457, 484, 427, 228, 32, 170, 453, 8, 339, 397, 39, 339, 384, 214,
                    33, 51, 470, 352, 484, 343, 458, 276, 104, 498, 347, 171, 482, 372, 347, 51, 369, 313, 379, 128,
                    167, 394, 458, 222, 167, 239, 288, 92, 266, 198, 241, 6, 222, 379, 10, 346, 193, 38, 112, 288, 138,
                    157, 475, 158, 190, 32, 162, 124, 442, 388, 390, 482, 339, 26, 381, 57, 150, 152, 162, 450, 397, 67,
                    31, 142, 498, 480, 277, 21, 45, 412, 7, 489, 381, 242, 23, 221, 33, 343, 437, 77, 289, 248, 359,
                    362, 224, 453, 359, 13, 355, 433, 45, 495, 394, 26, 382, 443, 460, 57, 384, 170, 475, 223, 457, 69,
                    36, 469, 38, 458, 218, 218, 438, 241, 288, 372, 394, 494, 152, 390, 125, 440, 141, 343, 449, 150,
                    362, 235, 6, 36, 198, 388, 7, 92, 309, 53, 43, 128, 223, 409, 187, 436, 480, 15, 177, 489, 257, 39,
                    433, 354, 85, 373, 32, 123, 437, 239, 23, 51, 384, 11, 100, 394, 449, 343, 340, 38, 7, 106, 43, 65,
                    153, 497, 475, 14, 13, 114, 31, 498, 61, 239, 446, 238, 438, 21, 408, 249, 58, 214, 356, 260, 111,
                    65, 38, 334, 470, 58, 69, 94, 374, 39, 337, 222, 39, 372, 138, 411, 55, 74, 26, 382, 121, 440, 430,
                    52, 155, 489, 369, 22, 138, 224, 355, 408, 52, 222, 397, 146, 146, 324, 32, 334, 355, 440, 170, 195,
                    23, 221, 369, 288, 61, 276, 219, 13, 364, 124, 141, 113, 364, 322, 15, 495, 276, 408, 70, 242, 430,
                    13, 309, 223, 26, 495, 342, 488, 210, 226, 458, 484, 160, 169, 11, 271, 162, 495, 355, 495, 324,
                    167, 18, 377, 167, 309, 309, 365, 142, 39, 87, 76, 390, 18, 150, 458, 221, 297, 347, 359, 440, 21,
                    489, 160, 278, 6, 483, 485, 469, 136, 219, 259, 94, 344, 379, 238, 150, 10, 26, 354, 275, 355, 368,
                    324, 100, 460, 214, 450, 340, 160, 38, 10, 100, 207, 390, 450, 289, 171, 368, 496, 414, 207, 449,
                    295, 313, 334, 443, 181, 485, 53, 443, 465, 155, 209, 112, 221, 157, 470, 330, 360, 433, 485, 215,
                    222, 228, 313, 409, 153, 35, 433, 334, 278, 171, 342, 346, 193, 100, 223, 253, 142, 150, 224, 224,
                    276, 364, 100, 57, 106, 14, 147, 354, 362, 130, 497, 496, 237, 7, 253, 14, 235, 43, 493, 330, 374,
                    160, 342, 229, 448, 377, 482, 324, 210, 152, 432, 488, 356, 53, 130, 77, 130, 497, 36, 136, 381, 51,
                    12, 246, 297, 239, 343, 74, 157, 16, 486, 276, 313, 39, 309, 246, 193, 460, 45, 64, 363, 74, 13, 55,
                    87, 136, 340, 104, 12, 421, 39, 57, 231, 289, 21, 104, 177, 235, 330, 313, 26, 344, 394, 347, 486,
                    368, 477, 440, 483, 182, 482, 87, 38, 373, 181, 31, 130, 162, 61, 295, 357, 477, 458, 142, 67, 170,
                    464, 384, 186, 214, 342, 43, 275, 182, 359, 36, 253, 431, 223, 412, 221, 147, 469, 169, 60, 237,
                    297, 382, 22, 266, 106, 113, 195, 309, 16, 390, 13, 150, 215, 23, 421, 408, 125, 448, 45, 203, 309,
                    92, 216, 60, 64, 496, 443, 21, 260, 456, 360, 496, 260, 483, 309, 94, 33, 125, 449, 355, 344, 195,
                    343, 357, 219, 440, 423, 186, 77, 339, 322, 12, 239, 272, 58, 357, 155, 207, 353, 7, 397, 218, 11,
                    18, 222, 16, 347, 69, 414, 8, 278, 229, 423, 411, 346, 433, 381, 362, 448, 475, 104, 22, 43, 150,
                    39, 32, 60, 10, 150, 69, 379, 436, 483, 438, 171, 186, 104, 18, 497, 295, 421, 210, 457, 373, 248,
                    193, 414, 239, 260, 7, 152, 488, 372, 488, 147, 289, 330, 170, 495, 272, 182, 7, 242, 438, 67, 456,
                    437, 235, 354, 146, 266, 347, 224, 360, 381, 119, 322, 182, 353, 373, 22, 16, 437, 260, 111, 18,
                    221, 275, 187, 119, 158, 272, 162, 111, 465, 130, 446, 228, 365, 123, 31, 427, 241, 272, 147, 207,
                    427, 32, 215, 246, 138, 125, 430, 123, 483, 157, 171, 477, 297, 277, 11, 394, 494, 177, 215, 465,
                    16, 381, 353, 112, 280, 106, 58, 160, 170, 334, 60, 26, 482, 235, 26, 414, 284, 456, 246, 346, 242,
                    278, 356, 43, 260, 153, 278, 215, 187, 493, 353, 384, 142, 198, 397, 65, 218, 397, 26, 486, 384,
                    354, 486, 10, 360, 45, 23, 16, 226, 353, 381, 498, 215, 253, 111, 260, 167, 259, 18, 456, 238, 31,
                    15, 87, 39, 453, 384, 280, 496, 55, 39, 120, 214, 382, 104, 52, 446, 485, 228, 388, 195, 430, 381,
                    337, 337, 216, 379, 106, 498, 173, 55, 357, 372, 38, 239, 74, 343, 64, 237, 150, 53, 249, 228, 446,
                    374, 235, 257, 423, 158, 460, 18, 442, 241, 440, 43, 160, 142, 271, 340, 470, 309, 12, 120, 87, 411,
                    277, 453, 446, 123, 475, 297, 276, 35, 343, 344, 106, 437, 210, 359, 377, 158, 36, 337, 495, 457,
                    421, 495, 374, 150, 111, 246, 488, 360, 21, 57, 340, 138, 218, 171, 260, 130, 16, 295, 295, 431,
                    360, 23, 209, 215, 411, 92, 470, 339, 456, 155, 259, 448, 277, 153, 141, 157, 177, 485, 155, 187,
                    277, 130, 340, 125, 339, 216, 238, 242, 64, 57, 67, 343, 379, 173, 162, 153, 356, 377, 442, 414,
                    368, 359, 494, 242, 45, 485, 85, 69, 431, 152, 360, 173, 124, 138, 237, 186, 171, 119, 297, 215, 22,
                    363, 427, 359, 494, 280, 363, 43, 198, 6, 121, 224, 169, 465, 186, 231, 357, 412, 448, 241, 210,
                    272, 31, 364, 224, 169, 409, 266, 334, 443, 55, 397, 114, 272, 498, 169, 382, 35, 207, 498, 465, 6,
                    13, 94, 343, 61, 216, 74, 477, 58, 495, 477, 489, 67, 142, 436, 6, 356, 60, 494, 427, 23, 464, 142,
                    198, 277, 237, 457, 477, 60, 223, 266, 339, 436, 495, 275, 178, 231, 284, 397, 125, 382, 353, 255,
                    460, 347, 374, 100, 173, 255, 125, 397, 10, 342, 470, 60, 448, 280, 51, 39, 495, 355, 16, 486, 482,
                    38, 374, 16, 13, 111, 182, 142, 289, 266, 379, 493, 453, 181, 111, 100, 277, 124, 278, 150, 15, 64,
                    16, 498, 142, 408, 347, 440, 182, 224, 280, 7, 21, 173, 7, 253, 440, 18, 356, 158, 178, 113, 171,
                    295, 485, 104, 453, 450, 496, 112, 6, 436, 114, 464, 215, 359, 238, 412, 52, 120, 177, 360, 437,
                    207, 475, 297, 215, 433, 147, 13, 229, 409, 13, 346, 85, 330, 136, 432, 344, 440, 69, 276, 55, 377,
                    10, 313, 246, 497, 226, 288, 155, 288, 362, 214, 60, 57, 125, 57, 356, 486, 51, 494, 218, 123, 458,
                    275, 355, 38, 55, 494, 249, 480, 12, 342, 58, 259, 337, 120, 209, 171, 114, 210, 377, 76, 353, 357,
                    60, 394, 207, 442, 87, 152, 352, 55, 344, 67, 372, 113, 480, 222, 162, 43, 147, 354, 470, 339, 77,
                    67, 113, 35, 157, 203, 11, 390, 477, 448, 186, 136, 421, 475, 436, 31, 436, 22, 365, 275, 224, 128,
                    272, 221, 106, 58, 379, 346, 92, 170, 142, 52, 368, 330, 157, 12, 433, 414, 340, 111, 372, 153, 207,
                    430, 7, 114, 384, 266, 483, 272, 489, 390, 229, 368, 470, 26, 340, 440, 257, 55, 412, 242, 438, 87,
                    15, 408, 431, 136, 157, 238, 384, 218, 128, 221, 449, 7, 275, 475, 355, 119, 437, 216, 388, 31, 497,
                    113, 218, 278, 182, 57, 228, 14, 255, 36, 218, 460, 423, 432, 355, 94, 271, 488, 124, 158, 121, 100,
                    363, 364, 458, 384, 284, 209, 170, 226, 482, 446, 128, 453, 214, 77, 334, 437, 352, 155, 489, 360,
                    186, 226, 92, 35, 377, 342, 61, 32, 343, 239, 141, 15, 120, 121, 11, 330, 36, 382, 275, 13, 51, 23,
                    74, 322, 450, 228, 498, 313, 430, 67, 231, 57, 162, 239, 309, 15, 55, 390, 330, 497, 357, 10, 114,
                    359, 120, 64, 276, 465, 255, 309, 382, 11, 427, 364, 210, 119, 275, 394, 390, 87, 408, 215, 224, 14,
                    170, 12, 150, 130, 411, 412, 475, 453, 162, 427, 239, 480, 276, 313, 437, 14, 160, 114, 488, 382,
                    489, 381, 443, 394, 186, 414, 412, 209, 182, 53, 313, 10, 215, 464, 53, 106, 369, 271, 128, 187,
                    485, 207, 363, 119, 222, 494, 437, 485, 162, 106, 141, 32, 15, 119, 309, 432, 369, 340, 214, 437,
                    58, 146, 14, 100, 430, 456, 226, 113, 186, 69, 408, 489, 10, 334, 253, 343, 216, 45, 7, 360, 237,
                    482, 498, 448, 169, 76, 374, 21, 111, 21, 218, 173, 497, 55, 124, 295, 53, 446, 33, 209, 352, 322,
                    446, 458, 26, 231, 7, 193, 38, 430, 114, 10, 186, 483, 443, 260, 120, 324, 60, 374, 16, 360, 111,
                    51, 69, 125, 450, 121, 223, 33, 255, 219, 449, 147, 346, 364, 60, 64, 120, 155, 152, 257, 280, 464,
                    162, 13, 61, 364, 120, 65, 346, 203, 411, 142, 223, 7, 353, 142, 377, 153, 141, 57, 388, 130, 121,
                    497, 440, 353, 253, 173, 241, 39, 150, 295, 226, 255, 23, 187, 359, 412, 215, 488, 65, 181, 374, 10,
                    260, 412, 171, 485, 322, 55, 297, 142, 239, 446, 497, 186, 15, 359, 43, 368, 61, 169, 289, 363, 440,
                    469, 289, 363, 339, 14, 112, 489, 486, 489, 453, 253, 276, 377, 449, 437, 477, 297, 257, 354, 147,
                    248, 347, 482, 162, 43, 334, 354, 409, 295, 231, 365, 229, 369, 207, 353, 356, 347, 45, 446, 346,
                    113, 16, 382, 272, 238, 216, 67, 238, 6, 16, 324, 77, 186, 496, 448, 374, 288, 173, 198, 85, 58,
                    382, 222, 7, 494, 339, 10, 449, 449, 178, 347, 482, 275, 354, 15, 381, 354, 377, 379, 219, 215, 409,
                    394, 216, 484, 388, 124, 369, 186, 488, 248, 277, 203, 494, 388, 231, 412, 437, 363, 120, 94, 45,
                    65, 77, 359, 60, 442, 271, 167, 92, 224, 167, 246, 61, 356, 64, 438, 23, 229, 178, 111, 181, 362,
                    275, 249, 295, 397, 249, 381, 257, 475, 354, 484, 433, 272, 330, 92, 39, 87, 162, 150, 33, 229, 16,
                    18, 408, 484, 171, 100, 60, 26, 288, 231, 355, 369, 295, 359, 288, 394, 187, 427, 280, 170, 138,
                    160, 362, 488, 496, 33, 411, 248, 347, 229, 469, 271, 104, 18, 363, 440, 160, 100, 125, 219, 409,
                    496, 70, 170, 464, 284, 436, 8, 39, 186, 394, 76, 221, 138, 253, 221, 203, 456, 35, 155, 431, 388,
                    342, 104, 488, 360, 465, 157, 485, 453, 167, 7, 228, 104, 322, 246, 123, 276, 162, 384, 364, 369,
                    277, 223, 178, 130, 31, 277, 52, 449, 113, 266, 379, 124, 223, 390, 259, 248, 12, 394, 458, 278,
                    198, 104, 223, 446, 239, 313, 7, 384, 187, 430, 61, 13, 182, 52, 113, 271, 354, 239, 379, 187, 61,
                    15, 119, 276, 162, 489, 356, 379, 18, 255, 198, 456, 489, 483, 51, 53, 43, 295, 249, 469, 111, 209,
                    146, 458, 36, 430, 242, 119, 408, 214, 61, 55, 157, 16, 498, 112, 456, 31, 465, 136, 58, 408, 363,
                    241, 177, 198, 483, 33, 483, 38, 123, 297, 446, 219, 13, 87, 355, 496, 150, 203, 65, 195, 322, 178,
                    10, 238, 173, 218, 57, 470, 214, 218, 12, 33, 218, 362, 337, 18, 11, 497, 411, 14, 229, 65, 397, 77,
                    64, 297, 26, 181, 112, 207, 432, 277, 427, 430, 15, 464, 431, 173, 488, 100, 411, 237, 123, 15, 353,
                    92, 260, 61, 112, 55, 152, 77, 465, 368, 288, 219, 94, 364, 190, 334, 182, 373, 106, 85, 224, 229,
                    160, 146, 100, 271, 226, 272, 141, 12, 456, 114, 259, 162, 223, 352, 229, 35, 365, 482, 221, 13,
                    433, 257, 480, 342, 309, 423, 450, 216, 167, 436, 484, 36, 241, 354, 216, 436, 57, 146, 458, 167,
                    218, 39, 187, 373, 23, 409, 224, 215, 32, 373, 442, 231, 112, 433, 339, 146, 203, 275, 384, 170,
                    360, 259, 249, 330, 343, 430, 484, 488, 162, 249, 170, 496, 354, 356, 70, 347, 235, 45, 229, 219,
                    125, 488, 177, 231, 275, 14, 32, 171, 124, 397, 209, 12, 31, 70, 480, 123, 433, 241, 16, 195, 368,
                    346, 437, 297, 195, 390, 15, 169, 216, 147, 390, 121, 94, 123, 364, 193, 456, 423, 465, 390, 11,
                    150, 482, 226, 411, 182, 87, 8, 297, 51, 246, 128, 289, 409, 64, 112, 114, 51, 276, 13, 128, 231,
                    121, 372, 169, 432, 119, 178, 36, 374, 224, 128, 153, 469, 280, 104, 178, 360, 76, 100, 272, 259,
                    18, 92, 113, 162, 130, 464, 167, 222, 124, 169, 53, 160, 433, 7, 218, 453, 152, 433, 235, 14, 153,
                    16, 255, 453, 284, 237, 494, 92, 61, 475, 238, 228, 272, 486, 288, 10, 214, 249, 141, 153, 374, 284,
                    458, 427, 343, 190, 465, 170, 237, 266, 384, 457, 344, 111, 16, 289, 414, 45, 432, 8, 363, 427, 437,
                    193, 18, 114, 147, 334, 442, 489, 193, 223, 64, 460, 74, 160, 13, 397, 271, 313, 464, 248, 373, 100,
                    382, 423, 288, 450, 448, 198, 35, 277, 61, 480, 257, 121, 14, 70, 222, 355, 177, 53, 275, 257, 246,
                    469, 182, 353, 85, 8, 219, 347, 219, 146, 193, 160, 43, 456, 465, 186, 249, 195, 309, 10, 384, 33,
                    379, 266, 33, 453, 74, 346, 259, 119, 141, 489, 469, 178, 77, 38, 394, 284, 257, 340, 85, 449, 219,
                    35, 186, 362, 18, 486, 69, 443, 260, 26, 77, 8, 239, 489, 284, 353, 430, 430, 494, 354, 32, 485,
                    260, 284, 152, 363, 157, 153, 8, 362, 21, 119, 8, 223, 411, 449, 421, 369, 330, 344, 152, 388, 344,
                    377, 423, 104, 130, 207, 64, 388, 158, 430, 259, 231, 480, 330, 495, 210, 313, 295, 113, 266, 437,
                    39, 241, 382, 340, 65, 215, 112, 138, 248, 260, 100, 257, 178, 249, 121, 259, 125, 32, 394, 390, 87,
                    322, 181, 177, 128, 13, 87, 259, 124, 6, 147, 382, 313, 120, 167, 362, 178, 484, 228, 14, 195, 157,
                    18, 186, 482, 482, 289, 218, 119, 437, 94, 427, 87, 21, 182, 443, 494, 373, 12, 423, 442, 65, 453,
                    113, 70, 43, 187, 284, 249, 219, 214, 219, 26, 223, 195, 193, 277, 226, 18, 394, 275, 141, 228, 209,
                    272, 173, 23, 125, 498, 36, 266, 57, 288, 113, 373, 436, 494, 483, 198, 369, 362, 253, 394, 43, 483,
                    57, 210, 322, 94, 460, 35, 120, 60, 76, 150, 443, 32, 364, 65, 125, 147, 280, 346, 12, 339, 493, 23,
                    153, 423, 477, 427, 11, 124, 241, 123, 231, 52, 381, 260, 443, 289, 493, 284, 443, 171, 449, 6, 51,
                    52, 470, 372, 431, 498, 446, 241, 442, 157, 32, 340, 436, 495, 495, 106, 123, 114, 423, 141, 36,
                    222, 280, 493, 394, 136, 498, 6, 253, 12, 477, 498, 246, 193, 246, 160, 496, 33, 178, 104, 313, 87,
                    340, 266, 271, 193, 248, 284, 246, 33, 12, 436, 173, 60, 12, 352, 248, 486, 412, 394, 229, 278, 113,
                    372, 187, 295, 339, 257, 438, 147, 295, 8, 94, 120, 372, 214, 493, 259, 60, 92, 70, 295, 242, 207,
                    158, 141, 356, 121, 55, 6, 373, 23, 178, 231, 235, 36, 369, 226, 52, 480, 259, 464, 465, 346, 430,
                    215, 226, 187, 469, 344, 57, 354, 381, 23, 120, 482, 121, 12, 388, 45, 170, 64, 160, 26, 343, 431,
                    35, 11, 52, 493, 340, 76, 187, 423, 214, 11, 442, 190, 171, 207, 414, 430, 221, 360, 21, 486, 128,
                    496, 278, 436, 58, 388, 146, 173, 152, 284, 440, 356, 469, 177, 457, 494, 494, 226, 162, 147, 438,
                    187, 155, 55, 61, 453, 390, 260, 379, 446, 123, 357, 346, 427, 443, 45, 330, 322, 423, 39, 448, 152,
                    226, 239, 187, 70, 322, 334, 216, 222, 249, 94, 157, 458, 457, 483, 381, 480, 112, 408, 388, 266,
                    289, 162, 74, 352, 276, 352, 374, 260, 209, 6, 483, 421, 186, 498, 277, 11, 388, 443, 352, 155, 257,
                    241, 278, 193, 36, 222, 216, 373, 69, 485, 498, 431, 248, 334, 364, 369, 60, 431, 141, 390, 242,
                    123, 421, 223, 58, 412, 460, 74, 255, 460, 458, 33, 340, 237, 231, 446, 64, 453, 493, 352, 360, 221,
                    377, 138, 339, 216, 438, 489, 457, 365, 480, 482, 231, 70, 460, 374, 157, 85, 214, 449, 344, 231,
                    278, 469, 209, 284, 61, 195, 480, 313, 246, 248, 346, 222, 195, 266, 431, 124, 372, 280, 356, 74,
                    58, 437, 414, 486, 111, 226, 363, 52, 57, 374, 460, 216, 489, 70, 130, 297, 464, 284, 438, 18, 52,
                    458, 51, 430, 409, 284, 248, 363, 408, 228, 344, 21, 226, 209, 437, 259, 257, 203, 222, 229, 432,
                    423, 377, 421, 22, 21, 397, 157, 61, 51, 493, 13, 8, 465, 61, 443, 344, 295, 31, 330, 493, 85, 162,
                    67, 362, 85, 186, 489, 477, 289, 10, 496, 55, 64, 249, 253, 14, 22, 216, 390, 237, 12, 469, 339,
                    219, 171, 368, 112, 340, 218, 241, 214, 486, 76, 412, 169, 11, 373, 352, 255, 167, 193, 181, 493,
                    324, 297, 11, 324, 124, 322, 483, 58, 70, 22, 388, 226, 22, 352, 58, 486, 388, 169, 216, 277, 266,
                    181, 229, 11, 288, 193, 52, 369, 31, 112, 52, 228, 271, 436, 423, 330, 496, 257, 377, 437, 408, 379,
                    153, 104, 235, 190, 52, 382, 330, 186, 480, 203, 357, 477, 87, 235, 136, 6, 21, 92, 255, 155, 253,
                    7, 198, 167, 60, 239, 228, 266, 51, 85, 436, 207, 414]
    elif N > 500:  # 7, 8, 9
        solution = solve_fake(input_data)



    # # visualization
    # n_c = len(customers)
    # n_w = len(facilities)

    # plot_org(customers, facilities)
    # for w in range(n_w):
    #     pf = facilities[w]
    #     plt.plot(pf.location.x, pf.location.y, 'o', color='gray')
                
    # for w in range(n_w):
    #     for c in range(n_c):
    #         if y[w, c].value() == 1:
    #             pf = facilities[w]
    #             pc = customers[c]
    #             plt.plot([pc.location.x, pf.location.x], [pc.location.y, pf.location.y], '-', color='royalblue')
    #             plt.plot(pf.location.x, pf.location.y, 'o', color='salmon')
                        
    # plt.plot([e.location.x for e in customers], [e.location.y for e in customers], ".", color='royalblue',
    #              label="customers")
    # plt.show()

    

    used = [0] * len(facilities)
    for facility_index in solution:
        used[facility_index] = 1

    obj = objective(customers, facilities, solution, used)
    output_data = '%.2f' % obj + ' ' + str(0) + '\n'
    output_data += ' '.join(map(str, solution))

    return output_data


def solve_naive(input_data):
    # parse the input
    lines = input_data.split('\n')
    parts = lines[0].split()
    facility_count = int(parts[0])
    customer_count = int(parts[1])

    facilities = []
    for i in range(1, facility_count + 1):
        parts = lines[i].split()
        facilities.append(Facility(i - 1,
                                   float(parts[0]),
                                   int(parts[1]),
                                   Point(float(parts[2]), float(parts[3]))
                                   )
                          )

    customers = []
    for i in range(facility_count + 1, facility_count + 1 + customer_count):
        parts = lines[i].split()
        customers.append(Customer(i - 1 - facility_count,
                                  int(parts[0]),
                                  Point(float(parts[1]), float(parts[2]))
                                  )
                         )

    n_c = len(customers)
    n_w = len(facilities)

    # transportation cost matrix
    T: Dict[Tuple[int, int], float] = {}
    for w in range(n_w):
        for c in range(n_c):
            T[w, c] = length(facilities[w].location, customers[c].location)

    # facility setup cost
    C: Dict[int, float] = {}
    for w in range(n_w):
        C[w] = facilities[w].setup_cost

    # customer's demands
    D = {}
    for c in range(n_c):
        D[c] = customers[c].demand

    # facility capacity
    Cap = {}
    for w in range(n_w):
        Cap[w] = facilities[w].capacity

    # distance between customer and facility
    c_xy = [(c.location.x, c.location.y) for c in customers]
    f_xy = [(f.location.x, f.location.y) for f in facilities]
    dist_mat = distance.cdist(f_xy, c_xy, 'euclidean')

    Dist = {}
    for w in range(n_w):
        for c in range(n_c):
            Dist[w, c] = dist_mat[w, c]

    # parameters for constraints
    min_demands = np.min([e.demand for e in customers])  # ある店のキャパ/全体の需要の最小値が，ある店の顧客数の上限

    # ----------------
    problem = pulp.LpProblem("MIP", pulp.LpMinimize)
    x = {}  # 決定変数の集合. 店
    y = {}  # 決定変数の集合. 客

    # Variables
    for w in range(n_w):
        for c in range(n_c):
            y[w, c] = pulp.LpVariable(f"y({w},{c})", 0, 1, pulp.LpInteger)

    for w in range(n_w):
        x[w] = pulp.LpVariable(f"x({w})", 0, 1, pulp.LpInteger)

    # Objective:
    problem += pulp.lpSum(C[w] * x[w] for w in range(n_w)) + pulp.lpSum(
        T[w, c] * y[w, c] for w in range(n_w) for c in range(n_c)), "Total cost"

    # Subject to:
    # Customer
    for c in range(n_c):
        problem += sum(y[w, c] for w in range(n_w)) == 1, f"Customer_must_go_facility({c})"

    # Customer and Facility
    for w in range(n_w):
        for c in range(n_c):
            problem += y[w, c] <= x[w], f"Customer_cannot_go_closed_facility({w, c})"

    # Num of facility
    for w in range(n_w):
        problem += sum(y[w, c] for c in range(n_c)) <= x[
            w] * n_c, f"Facility cannot exceed the number of customer({w, c})"

    # Capacity
    for w in range(n_w):
        problem += sum(D[c] * y[w, c] for c in range(n_c)) <= Cap[w], f"Demand cannot exceed capacity({w, c})"

    for w in range(n_w):
        problem += sum(y[w, c] for c in range(n_c)) <= Cap[
            w] / min_demands, f"Demand per min demand cannot exceed num of assigned customers({w})"

    # Distance
    for w in range(n_w):
        for c in range(n_c):
            # problem += Dist[w, c] * y[w, c] <= 0.5 * max(Dist[ww, c] for ww in range(n_w)), f"Distance constraint({w, c})"
            problem += Dist[w, c] * y[w, c] <= max(Dist[ww, c] for ww in range(n_w)), f"Distance constraint({w, c})"

    # Solve
    solver = pulp.COIN_CMD(threads=16)
    result_status = problem.solve(solver)

    # Generate solution
    solution = []
    for c in range(n_c):
        for w in range(n_w):
            if y[w, c].value() == 1:
                solution.append(w)

    return solution


def solve_grid(input_data):
    pass


def solve_fake(input_data):
    # Modify this code to run your optimization algorithm

    # parse the input
    lines = input_data.split('\n')

    parts = lines[0].split()
    facility_count = int(parts[0])
    customer_count = int(parts[1])

    facilities = []
    for i in range(1, facility_count + 1):
        parts = lines[i].split()
        facilities.append(Facility(i - 1, float(parts[0]), int(parts[1]), Point(float(parts[2]), float(parts[3]))))

    customers = []
    for i in range(facility_count + 1, facility_count + 1 + customer_count):
        parts = lines[i].split()
        customers.append(Customer(i - 1 - facility_count, int(parts[0]), Point(float(parts[1]), float(parts[2]))))

    # build a trivial solution
    # pack the facilities one by one until all the customers are served
    solution = [-1] * len(customers)
    capacity_remaining = [f.capacity for f in facilities]

    facility_index = 0
    for customer in customers:
        if capacity_remaining[facility_index] >= customer.demand:
            solution[customer.index] = facility_index
            capacity_remaining[facility_index] -= customer.demand
        else:
            facility_index += 1
            assert capacity_remaining[facility_index] >= customer.demand
            solution[customer.index] = facility_index
            capacity_remaining[facility_index] -= customer.demand

    return solution


import sys

if __name__ == '__main__':
    import sys

    if len(sys.argv) > 1:
        file_location = sys.argv[1].strip()
        with open(file_location, 'r') as input_data_file:
            input_data = input_data_file.read()
        print(solve_it(input_data))
    else:
        print(
            'This test requires an input file.  Please select one from the data directory. (i.e. python solver.py ./data/fl_16_2)')
